---
description:
globs:
alwaysApply: true
---
# Baukasten Kirby CMS Rules

You are an expert in Kirby CMS with a focus on headless implementations.

## Key Principles

- Kirby is used as a headless CMS in this project
- The CMS generates JSON files consumed by an Astro frontend
- Most logic is implemented in plugins (located in site/plugins/ directory)
- The CMS is hosted on different hosting setups as defined in environment variables

## Project Structure

The project follows this structure:
```
content/             - Content folders for each section
docs/                - All project documentation
kirby/               - Core Kirby CMS files (should not be modified)
site/
  blueprints/        - Structure definitions for content
    blocks/          - Block-based content definitions
    fields/          - Custom field definitions
    files/           - File upload definitions
    groups/          - Blueprint groups
    pages/           - Page type definitions
    sections/        - Custom sections
    tabs/            - Blueprint tabs
    users/           - User role definitions
  config/            - Configuration files for Kirby
  controllers/       - PHP controllers for templates
  languages/         - Language definitions
  models/            - Custom page models
  plugins/           - Custom plugins extending functionality
    baukasten-blocks/          - Block definitions for Baukasten
    baukasten-blocks-preview/  - Preview functionality for blocks
    baukasten-field-labels/    - Custom field labels
    baukasten-field-methods/   - Custom field methods
    baukasten-grid-blocks/     - Grid-based block layouts
    baukasten-kirby-routes/    - Custom API routes
    baukasten-layouts/         - Layout definitions
    baukasten-mime/            - MIME type handling
    baukasten-programmable-blueprints/ - Dynamic blueprint generation
    baukasten-sitemap/         - Sitemap generation
    backups/                   - Backup functionality
    kirby-column-blocks/       - Column-based block layouts
    kirby-deploy-trigger/      - Deployment triggers
    kirby-thumbhash/           - Image processing plugin
    kirby3-janitor/            - Cleanup and maintenance tools
    meta/                      - Meta information handling
  templates/         - PHP templates for rendering
public/              - Publicly accessible files
  assets/            - CSS, JS, and image assets
    css/             - Compiled CSS files
    img/             - Static images
  media/             - Uploaded files and media
  panel/             - Kirby Panel (admin interface)
storage/             - Cache and session storage
vendor/              - Composer dependencies
```

## Integration Points

- The frontend connects to Kirby via the URL defined in KIRBY_URL environment variable
- Data is consumed through JSON endpoints (e.g., '/global.json')
- The CMS provides structured content that maps to the block-based component system in the Astro frontend
- The Kirby API routes are defined in plugins/baukasten-kirby-routes/
- Deploy triggers can automatically notify the frontend when content changes

## Content Structure

- Content is organized in hierarchical page structures
- Each page can have multiple language versions
- Page content is structured using blocks
- Blocks are defined in site/blueprints/blocks/
- Content is exposed via JSON endpoints for the Astro frontend
- Grid and column-based layouts available for complex content structures

## Key Features

- Multi-language support with language codes and default language settings
- Content blocks that map to corresponding Astro components
- Configuration options exposed through the global.json endpoint
- Robust media handling with image processing capabilities
- Thumbhash generation for image placeholders
- Preview functionality for content blocks
- Automated sitemap generation
- Deploy triggers for frontend updates
- Grid-based and column-based block layouts
- Custom field methods and labels
- Programmable blueprint generation

## Development Workflow

- Kirby provides the content structure and data
- Changes to the CMS structure may require corresponding updates to the Astro frontend
- The preview functionality in Astro (/preview/) allows viewing content changes without deployment
- Panel interface for content editors at /panel
- Deploy triggers can automatically rebuild the frontend when content changes
- Block preview functionality allows real-time content editing

## Plugin Structure

- Custom plugins extend Kirby's functionality
- baukasten-blocks - Provides block-based content definitions
- baukasten-blocks-preview - Enables real-time block previews
- baukasten-field-labels - Custom field labeling system
- baukasten-field-methods - Extended field functionality
- baukasten-grid-blocks - Grid-based layout system
- baukasten-kirby-routes - Creates API endpoints for Astro
- baukasten-layouts - Layout components and definitions
- baukasten-mime - MIME type handling and validation
- baukasten-programmable-blueprints - Dynamic blueprint generation
- baukasten-sitemap - Automated sitemap generation
- backups - Backup and restore functionality
- kirby-column-blocks - Column-based layout system
- kirby-deploy-trigger - Deployment automation
- kirby-thumbhash - Image processing and optimization
- kirby3-janitor - Maintenance and cleanup tools
- meta - Meta information and SEO handling

## Best Practices

- Follow Kirby's coding standards and documentation
- Ensure JSON endpoints are well-structured and documented
- Handle multilingual content appropriately
- Implement proper error handling and validation
- Use Kirby's blueprints for structured content editing
- Consider caching strategies for improved performance
- When modifying blueprints, update corresponding Astro components
- Check latest Kirby documentation at https://getkirby.com/docs
- Follow the convention over configuration approach
- Leverage the extensive plugin ecosystem for enhanced functionality
- Use programmable blueprints for dynamic content structures
- Implement deploy triggers for seamless frontend updates
- Utilize block preview functionality for better content editing experience
- **All documentation must be placed in the `docs/` folder** - This includes technical documentation, setup guides, API documentation, and any other project-related documentation

## Documentation Standards

- Place all project documentation in the `docs/` folder at the project root
- Use clear, descriptive filenames for documentation files
- Organize documentation by topic or feature when the docs folder becomes extensive
- Keep documentation up-to-date with code changes
- Use Markdown (.md) format for consistency
- Include both technical and user-facing documentation as appropriate
- Document plugin functionality and integration points
- Maintain API endpoint documentation for frontend consumption